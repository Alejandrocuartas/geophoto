package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/Alejandrocuartas/geophoto/graph/model"
)

// NewUser is the resolver for the newUser field.
func (r *mutationResolver) NewUser(ctx context.Context, password string, username string) (*model.User, error) {
	user := model.User{
		ID:       "id",
		Username: "Alejo",
		Password: "pass",
	}
	return &user, nil
}

// NewPhoto is the resolver for the newPhoto field.
func (r *mutationResolver) NewPhoto(ctx context.Context, input model.NewPhoto) (*model.Photo, error) {
	panic(fmt.Errorf("not implemented: NewPhoto - newPhoto"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user := model.User{
		ID:       "id",
		Username: "Alejo",
		Password: "pass",
	}
	return &user, nil
}

// Photos is the resolver for the photos field.
func (r *queryResolver) Photos(ctx context.Context, lat string, long string) ([]*model.Photo, error) {
	panic(fmt.Errorf("not implemented: Photos - photos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
